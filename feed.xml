<feed xmlns="http://www.w3.org/2005/Atom"> <id>/</id><title>慕清辞</title><subtitle>这是通过Chirpy主题配置而成的</subtitle> <updated>2022-04-15T07:23:45+00:00</updated> <author> <name>QingciMu</name> <uri>/</uri> </author><link rel="self" type="application/atom+xml" href="/feed.xml"/><link rel="alternate" type="text/html" hreflang="zh-CN" href="/"/> <generator uri="https://jekyllrb.com/" version="4.2.2">Jekyll</generator> <rights> © 2022 QingciMu </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>SQL语法</title><link href="/posts/SQL%E8%AF%AD%E6%B3%95/" rel="alternate" type="text/html" title="SQL语法" /><published>2022-04-10T06:07:00+00:00</published> <updated>2022-04-10T06:07:00+00:00</updated> <id>/posts/SQL%E8%AF%AD%E6%B3%95/</id> <content src="/posts/SQL%E8%AF%AD%E6%B3%95/" /> <author> <name>慕清辞</name> </author> <category term="数据库" /> <summary> 数据库操作 创建并使用数据库 ​ create database Seejen; use seejen; 创建表 create table account( id int not null primary key, name varchar(50) not null, createTime date not null ); 修改表 添加列 alter table account add money int; 删除列 alter table account drop column createTime; 删除表 drop table account; 插入 插入一列 insert into account values(1,"MuQingci",1000); 将一个表插入一个新表 create ... </summary> </entry> <entry><title>Spring</title><link href="/posts/Spring/" rel="alternate" type="text/html" title="Spring" /><published>2022-04-08T14:20:00+00:00</published> <updated>2022-04-08T14:20:00+00:00</updated> <id>/posts/Spring/</id> <content src="/posts/Spring/" /> <author> <name>慕清辞</name> </author> <category term="Java框架" /> <summary> </summary> </entry> <entry><title>数据结构</title><link href="/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/" rel="alternate" type="text/html" title="数据结构" /><published>2022-04-07T16:33:00+00:00</published> <updated>2022-04-07T16:33:00+00:00</updated> <id>/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/</id> <content src="/posts/%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84/" /> <author> <name>慕清辞</name> </author> <category term="数据结构" /> <summary> 线性结构 线性表及其基本操作 线性表：由同类型数据元素构成的有序序列的线性结构，长度可以动态增长或收缩。 表中元素个数称为线性表 线性表没有元素时，成为空表 表起始位置称为表头，表结束位置称为表尾 线性表的抽象数据类型描述 两个要素： 数据对象集：线性表是n（&amp;gt;=0）个元素构成的有序序列（a1,a2,……） 操作集： clear() 将一个已存在的线性表置成空表 isEmpty() 判断线性表是否为空 length() 返回线性表长度 get(i) 读取线性表的第i个元素 insert(i,x) 在第i个元素之前插入一个值为x的元素，当i = length时，在表尾插入x remove(i) 删除并返回第i个元素 indexOf(x) 返回线性表中首次出现指定元素的序号，不包含返回-1 display(... </summary> </entry> <entry><title>LRU缓存</title><link href="/posts/LRU%E7%BC%93%E5%AD%98/" rel="alternate" type="text/html" title="LRU缓存" /><published>2022-04-02T04:16:00+00:00</published> <updated>2022-04-02T04:16:00+00:00</updated> <id>/posts/LRU%E7%BC%93%E5%AD%98/</id> <content src="/posts/LRU%E7%BC%93%E5%AD%98/" /> <author> <name>慕清辞</name> </author> <category term="算法" /> <summary> package com.Seejen.java; import java.util.HashMap; import java.util.Map; //最简单的数据结构就是双向链表 LinkedHashMap，面试的时候最好手写定义一个双向链表 public class Main { public static void main(String[] args) { LRUCache obj = new LRUCache(10); obj.put(1,1); System.out.println(obj.get(1)); } } class LRUCache{ private Map&amp;lt;Integer,DLinkedNode&amp;gt; cache = new HashMap&amp;lt;&amp;gt;(); p... </summary> </entry> <entry><title>Java基础2</title><link href="/posts/Java%E5%9F%BA%E7%A1%802/" rel="alternate" type="text/html" title="Java基础2" /><published>2022-04-01T04:16:00+00:00</published> <updated>2022-04-01T04:16:00+00:00</updated> <id>/posts/Java%E5%9F%BA%E7%A1%802/</id> <content src="/posts/Java%E5%9F%BA%E7%A1%802/" /> <author> <name>慕清辞</name> </author> <category term="Java" /> <summary> Java基础2 数据类型相关 包装类型 ​ 基本类型都有对应的包装类型，基本类型与其对应的包装类型之间的赋值使用自动装箱与拆箱完成 Integer x = 2; // 装箱 调用了 Integer.valueOf(2) int y = x; // 拆箱 调用了 X.intValue() 缓存池 new Integer(123) 与 Integer.valueOf(123) 的区别在于： new Integer(123) 每次都会新建一个对象； Integer.valueOf(123) 会使用缓存池中的对象，多次调用会取得同一个对象的引用。 Integer x = new Integer(123); Integer y = new Integer(123); System.out.println(x == y); // fal... </summary> </entry> </feed>
